#!/bin/bash

TMP=$(mktemp -d)
SUPPORT=$TMP/signalfx-support
mkdir -p $SUPPORT

usage() {
    echo "Usage: $0 [-d | --dry-run] ([ signalfx-agent | signalfx-istio-adapter | signalfx-smart-gateway ] ...)" >&2
    exit 1
}



get_signalfx_pods_status () {
	kubectl get pods --all-namespaces -l app=signalfx-agent -o wide
}

get_status () {
    namespace=$1
    pod_name=$2
    echo "Pod: $pod_name" $'\t' "Namespace: $namespace"
    separator
    kubectl exec -t --namespace $namespace $pod_name signalfx-agent status config
    echo ""
    echo ""
}

get_logs () {
    namespace=$1
    pod_name=$2
    kubectl logs --namespace $namespace $pod_name
}

get_all_logs () {
    while IFS= read -r line; 
    do 
        get_logs $line;
    done <<< "$(get_signalfx_agent_pods)"
}

get_all_status () {
    while IFS= read -r line; 
    do 
        get_status $line;
    done <<< "$(get_signalfx_agent_pods)"
}

separator () {
    echo "----------------------------------------------------------"
}

get_signalfx_agent_pods () {
    echo "$(kubectl get pods -l app=signalfx-agent --all-namespaces --no-headers | tr -s " " | cut -d     " " -f 1,2)"
}

get_namespace () {
    echo "$(kubectl get pods -l app=signalfx-agent --all-namespaces --no-headers | tr -s " " | cut -d     " " -f 1 | head -n 1)"
}

get_configmap() {
    echo "$(kubectl describe configmap signalfx-agent --namespace $(get_namespace))"
}

get_support() {
    # get config map
    echo "Getting config map"
    echo "$(get_configmap)" > $SUPPORT/configmap.yaml
    while IFS= read -r line; 
    do 
        get_support_for_pod $line;
    done <<< "$(get_signalfx_agent_pods)"
    zip_tmp
}

get_support_for_pod () {
    namespace=$1 
    pod=$2
    printf "Getting logs and status for $pod\n"
    mkdir $SUPPORT/$pod
    get_logs $namespace $pod  > $SUPPORT/$pod/agent.log
    get_status $namespace $pod  > $SUPPORT/$pod/agent_status.txt
}

zip_tmp () {
    WORKING_DIR=$PWD
    cd $TMP && zip -r9 -q signalfx-agent-support.zip signalfx-support/
    cp $TMP/signalfx-agent-support.zip $WORKING_DIR
    cd $WORKING_DIR
}

trap cleanup 0 1 2 3 6 13 15

cleanup()
{
  rm -rf "$TMP"
  exit 1
}

# parse command line flags
POS_ARGS=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--dry-run)
            PUBLISH="false"
            shift
            ;;
        *)
            POS_ARGS+=("$1")
            shift
            ;;
    esac
done

for chart in "$@"; do
    case $chart in
        support)
            get_support
            ;;
        signalfx-istio-adapter)
            CHART_DIR_VAR=ISTIO_ADAPTER_CHART_DIR
            ;;
        signalfx-smart-gateway)
            CHART_DIR_VAR=SMART_GATEWAY_CHART_DIR
            ;;
        *) # default
            usage
            ;;
    esac

done

# restore remaining positional arguments
if [[ ${#POS_ARGS[@]} -gt 0 ]]; then
    set -- "${POS_ARGS[@]}"
fi

if [[ "0" == $# ]]; then
   get_signalfx_pods_status
fi
